#! /usr/bin/env python
#
# GUI module generated by PAGE version 4.10
# In conjunction with Tcl version 8.6
#    Feb 28, 2018 06:00:10 PM
import sys

try:
    from Tkinter import *
except ImportError:
    from tkinter import *

try:
    import ttk
    py3 = 0
except ImportError:
    import tkinter.ttk as ttk
    py3 = 1

import welcome_support

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = Tk()
    welcome_support.set_Tk_var()
    top = New_Toplevel_1 (root)
    welcome_support.init(root, top)
    root.mainloop()

w = None
def create_New_Toplevel_1(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = Toplevel (root)
    welcome_support.set_Tk_var()
    top = New_Toplevel_1 (w)
    welcome_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_New_Toplevel_1():
    global w
    w.destroy()
    w = None


class New_Toplevel_1:
    go=0
    filepathtext="labyrinth.txt"
    mazeSize=5
    userchoice=0
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85' 
        _ana2color = '#d9d9d9' # X11 color: 'gray85' 
        font10 = "-family Lato -size 16 -weight normal -slant roman "  \
            "-underline 0 -overstrike 0"
        font11 = "-family Lato -size 14 -weight normal -slant roman "  \
            "-underline 0 -overstrike 0"
        font12 = "-family Lato -size 18 -weight normal -slant roman "  \
            "-underline 0 -overstrike 0"
        font9 = "-family Laksaman -size 24 -weight bold -slant roman "  \
            "-underline 0 -overstrike 0"

        top.geometry("600x450+750+161")
        top.title("Q-learning Labyrinth")
        usr=0

        self.Title = Label(top)
        self.Title.place(relx=0.25, rely=0.04, height=67, width=326)
        self.Title.configure(activeforeground="#b30000")
        self.Title.configure(font=font9)
        self.Title.configure(text='''Q-Learning Labyrinth''')

        self.filepath = Entry(top)
        self.filepath.place(relx=0.63, rely=0.4,height=30, relwidth=0.28)
        self.filepath.configure(background="white")
        self.filepath.configure(font="TkFixedFont")
        self.filepath.configure(width=166)

        self.pathLabel = Label(top)
        self.pathLabel.place(relx=0.55, rely=0.4, height=27, width=47)
        self.pathLabel.configure(font=font11)
        self.pathLabel.configure(text='''Path:''')

        self.Message1 = Message(top)
        self.Message1.place(relx=0.57, rely=0.49, relheight=0.29, relwidth=0.33)
        self.Message1.configure(text='''Files must be .txt types, with an equal number of rows and columns. '1' represents an empty square, '0' represents a wall, '3' represents a trap and '5' represents the exit. We recommend putting '5' at the bottom right and a '1' at the top left.''')
        self.Message1.configure(width=199)

        self.labSize = Entry(top)
        self.labSize.place(relx=0.33, rely=0.4,height=30, relwidth=0.06)
        self.labSize.configure(background="white")
        self.labSize.configure(font="TkFixedFont")
        self.labSize.configure(selectbackground="#c4c4c4")
        self.labSize.configure(width=36)

        self.pathLabel1 = Label(top)
        self.pathLabel1.place(relx=0.2, rely=0.4, height=27, width=47)
        self.pathLabel1.configure(activebackground="#f9f9f9")
        self.pathLabel1.configure(font=font11)
        self.pathLabel1.configure(text='''Size:''')

        self.butGo = Button(top,command=lambda *args: self.goTime())
        self.butGo.place(relx=0.48, rely=0.84, height=41, width=65)
        self.butGo.configure(activebackground="#7bd93b")
        self.butGo.configure(font=font12)
        self.butGo.configure(text='''Go!''')

        self.random = Radiobutton(top, variable=usr, value=1)
        self.random.place(relx=0.08, rely=0.31, relheight=0.07, relwidth=0.36)
        self.random.configure(activebackground="#d9d9d9")
        self.random.configure(font=font10)
        self.random.configure(justify=LEFT)
        self.random.configure(text='''Random Labyrinth''')
        
        self.udef = Radiobutton(top, variable=usr, value=2)
        self.udef.place(relx=0.47, rely=0.31, relheight=0.07, relwidth=0.45)
        self.udef.configure(activebackground="#d9d9d9")
        self.udef.configure(font=font10)
        self.udef.configure(justify=LEFT)
        self.udef.configure(text='''User-defined Labyrinth''')

        self.menubar = Menu(top,font="TkMenuFont",bg='#99d8d8',fg=_fgcolor)
        top.configure(menu = self.menubar)
        self.top=top
        self.userChoice=usr

    def getGo(self):
        return self.go
    
    def goTime(self):
        self.go=1
        print("go has been updated, go=%s" % self.go)
        if self.go ==1 and (self.userchoice==1 or self.userchoice==2):# and (self.filepathtext!=0 or self.mazeSize>0):
            print("all systems go")
            self.allvals={'userchoice':self.userchoice, 'path':self.filepathtext, 'size':self.mazeSize}
        else:
            self.allvals=0
    
    def getUserChoice(self):
        return self.userchoice
    
    def getFilepath(self):
        return self.filepathtext
    
    def getMazeSize(self):
        return self.mazeSize
        
    def getVals(self):
        if self.go ==1 and (self.userchoice==1 or self.userchoice==2) and (self.filepathtext!=0 or self.mazeSize>0):
            print("all systems go")
            allvals={'userchoice':self.userchoice, 'path':self.filepathtext, 'size':self.mazeSize}
        else:
            allvals=0
            
    def _close(self):
        self.master.destroy()
    def destroy(self):
        self.top.destroy()
    def update(self):
        self.top.update()
        

if __name__ == '__main__':
    vp_start_gui()



